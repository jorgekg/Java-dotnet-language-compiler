package gals;
public interface ParserConstants
{
    int START_SYMBOL = 42;

    int FIRST_NON_TERMINAL    = 42;
    int FIRST_SEMANTIC_ACTION = 78;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1,  0,  0,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1,  2,  2,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1, -1, -1,  6,  6,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, 10,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1,  5,  5,  5, -1, -1, -1, -1, -1, -1,  4, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 12, -1, -1, -1, -1, -1, 12, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, 12, -1, 12, -1, -1, -1, -1, -1, 13, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 14, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, 16, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 31, 31, 31, 31, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, 31, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, 31, 31, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 29, -1, -1, -1, -1, -1, 29, -1, -1, 29, 30, -1, -1, -1, -1, -1, -1, 29, -1, 29, -1, -1, -1, -1, -1, 29, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 34, -1, -1, -1, -1, -1, 34, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 34, -1, 34, -1, -1, -1, -1, -1, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 37, 37, 37, 37, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, 37, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, 37, 37, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 38, -1, -1, -1, 39, -1, 38, -1, -1, 38, -1, -1, -1, -1, -1, -1, 40, 38, -1, 38, -1, 38, -1, 38, -1, 38, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 41, 41, 41, 41, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, 44, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 45, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 47, -1, -1, -1, 47, -1, 47, -1, -1, 47, -1, -1, -1, -1, -1, -1, 47, 47, -1, 47, -1, 47, -1, 47, -1, 47, 47, 47, -1, -1, -1, -1, -1, 46, 46, 46, 46, 46, 46 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 49, 50, 51, 52, 53 },
        { -1, -1, 54, 54, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, 54, 54, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 55, -1, -1, -1, 55, -1, 55, -1, -1, 55, -1, -1, -1, -1, -1, -1, 55, 55, -1, 55, -1, 55, -1, 55, -1, 55, 55, 55, -1, 56, 57, -1, -1, 55, 55, 55, 55, 55, 55 },
        { -1, -1, 58, 58, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, -1, -1, 58, 58, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 59, -1, -1, -1, 59, -1, 59, -1, -1, 59, -1, -1, -1, -1, -1, -1, 59, 59, -1, 59, -1, 59, -1, 59, -1, 59, 59, 59, -1, 59, 59, 60, 61, 59, 59, 59, 59, 59, 59 },
        { -1, -1, 70, -1, -1, -1, 70, -1, 70, -1, -1, 70, -1, -1, -1, -1, -1, -1, 70, 70, -1, 70, -1, 70, 69, 70, -1, 70, 70, 70, -1, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70 },
        { -1, -1, 62, 63, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, -1, -1, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  93,  43,  27,  49,  28,  94 },
        {   0 },
        {  44, 179,  23,  47, 181,  43 },
        {   3,  48 },
        { 180,  24,   3,  48 },
        { 180 },
        {  45 },
        {  46 },
        {  17 },
        {  15 },
        {  16 },
        {   8,  25,  45,  24,   4,  26 },
        {  51,  49 },
        {   0 },
        {  52 },
        {  54 },
        {  57 },
        {  60 },
        {  64 },
        {   3, 180,  53,  31,  66, 184 },
        {   0 },
        {  25,  66,  26 },
        {  20,  29,  55, 182,  30 },
        {   3, 180,  53,  56 },
        {  24,   3, 180,  53,  56 },
        {   0 },
        {  22,  29,  58,  30 },
        {  29,  66, 185,  30,  61,  62, 186 },
        {  14,  27,  63,  28 },
        {   0 },
        { 187,  13,  27,  63,  28 },
        {  66,  59 },
        {  92,  24,  66,  59 },
        {  92 },
        {  49 },
        { 188,   9,  27,  63,  65,  63,  28, 190 },
        {  12,  29,  66, 189,  30,  10 },
        {  68,  67 },
        {   0 },
        {   7,  68,  95,  67 },
        {  19,  68,  96,  67 },
        {  69 },
        {  21,  89 },
        {  11,  90 },
        {  18,  68,  91 },
        {  72,  70 },
        {  71,  87,  72,  88 },
        {   0 },
        {  36 },
        {  37 },
        {  38 },
        {  39 },
        {  40 },
        {  41 },
        {  74,  73 },
        {   0 },
        {  32,  74,  79,  73 },
        {  33,  74,  80,  73 },
        {  77,  75 },
        {   0 },
        {  34,  77,  81,  75 },
        {  35,  77,  82,  75 },
        {   3, 183,  76 },
        {   4,  84 },
        {   6,  98 },
        {   5,  97 },
        {  29,  66,  30 },
        {  32,  77,  85 },
        {  33,  77,  86 },
        {  25,  66,  26 },
        {   0 }
    };

    String[] PARSER_ERROR =
    {
                "",
        "esperado fim de programa",
        "esperado palavra",
        "esperado identificador",
        "esperado constante numerica",
        "esperado constante caractere",
        "esperado constante literal",
        "esperado and",
        "esperado array",
        "esperado do",
        "esperado exit",
        "esperado false",
        "esperado if",
        "esperado ifFalseDo",
        "esperado ifTrueDo",
        "esperado literal",
        "esperado logical",
        "esperado number",
        "esperado not",
        "esperado or",
        "esperado read",
        "esperado true",
        "esperado write",
        "esperado \":\"",
        "esperado \",\"",
        "esperado \"[\"",
        "esperado \"]\"",
        "esperado \"{\"",
        "esperado \"}\"",
        "esperado \"(\"",
        "esperado \")\"",
        "esperado \":=\"",
        "esperado \"+\"",
        "esperado \"-\"",
        "esperado \"*\"",
        "esperado \"/\"",
        "esperado \"=\"",
        "esperado \"!=\"",
        "esperado \"<\"",
        "esperado \"<=\"",
        "esperado \">\"",
        "esperado \">=\"",
        "esperado array  number  literal  logical  {", //<program> inv√°lido",
        "esperado array  number  literal  logical  {", //<var_declare> inv√°lido",
        "esperado array  number  literal  logical", //"<type> inv√°lido",
        "esperado number  literal  logical", //"<simple> inv√°lido",
        "esperado array", //"<array> inv√°lido",
        "esperado identificador", //"<id_list> inv√°lido",
        "esperado array   literal  logical  number  ,  {", //"<id_list1> inv√°lido",
        "esperado identificador  do  if  read  write  }  (", //"<comands> inv√°lido",
        "", //"<comands1> inv√°lido",
        "esperado identificador  do  read  write  (", //"<comand> inv√°lido",
        "esperado identificador", //"<var_attrib> inv√°lido",
        "esperado ,  [  )  :=", //"<col> inv√°lido",
        "esperado read", //"<read> inv√°lido",
        "esperado identificador", //"<id_read_list> inv√°lido",
        "esperado ,  )", //"<id_read_list1> inv√°lido",
        "esperado write", //"<write> inv√°lido",
        "esperado identificador  constante numerica  constante caractere  constante literal  false  not  true  )  +  -", //"<exp_list> inv√°lido",
        "esperado ,  )", //"<exp_list1> inv√°lido",
        "esperado (", //"<select> inv√°lido",
        "esperado ifTrueDo", //"<true> inv√°lido",
        "esperado identificador  do  if  ifFalseDo  write  read  }  (", //"<false> inv√°lido",
        "esperado identificador  do  if  read  write  }  (", //"<cmd_list> inv√°lido",
        "esperado do",//"<while> inv√°lido",
        "esperado if", //"<if> inv√°lido",
        "esperado express√£o", //"<expressao> inv√°lido",
        "esperado express√£o", //"<expressao1> inv√°lido",
        "esperado express√£o", //"<elemento> inv√°lido",
        "esperado express√£o", //"<relacional> inv√°lido",
        "esperado express√£o", //"<relacional1> inv√°lido",
        "esperado express√£o", //"<operador_relacional> inv√°lido",
        "esperado express√£o", //"<aritimetica> inv√°lido",
        "esperado express√£o", //"<aritimetica1> inv√°lido",
        "esperado express√£o", //"<termo> inv√°lido",
        "esperado express√£o", //"<termo1> inv√°lido",
        "esperado express√£o", //"<fator1> inv√°lido",
        "esperado express√£o", //"<fator> inv√°lido"
    };
}
